version: 2.1

parameters:
  targetEnv:
    type: string
    default: ''

commands:
  export-project-id:
    steps:
      - run:
          command: >-
            PROJECT_ID="test-project" && 
            echo $PROJECT_ID &&
            echo 'export PROJECT_ID=$PROJECT_ID' >> $BASH_ENV &&
            source $BASH_ENV &&
            cat /tmp/.bash_env-63284aa98be625251b63dffa-0-build

# this allows you to use CircleCI's dynamic configuration feature
setup: true

# the path-filtering orb is required to continue a pipeline based on
# the path of an updated fileset
orbs:
  path-filtering: circleci/path-filtering@0.1.1

jobs:
  export-project-id:
    docker:
      - image: cimg/node:18.9.0
    steps:
      - export-project-id

workflows:
  # the always-run workflow is always triggered, regardless of the pipeline parameters.
  always-run:
    jobs:
      # the path-filtering/filter job determines which pipeline
      # parameters to update.
      - path-filtering/filter:
          name: check-updated-files
          # 3-column, whitespace-delimited mapping. One mapping per
          # line:
          # <regex path-to-test> <parameter-to-set> <value-of-pipeline-parameter>
          mapping: |
            frontend/.* run-build-frontend true
            backend/.* run-build-backend true
            open-api/.* run-build-open-api true
            server-layers/.* run-build-server-layers true
            . run-build-root true
          base-revision: main
          # this is the path of the configuration we should trigger once
          # path filtering and pipeline parameter value updates are
          # complete. In this case, we are using the parent dynamic
          # configuration itself.
          config-path: .circleci/continue_config.yml
      - export-project-id